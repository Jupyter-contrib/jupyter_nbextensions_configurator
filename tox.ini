; a generative tox configuration, see: https://testrun.org/tox/latest/config.html#generative-envlist
; most of this came from https://github.com/ionelmc/cookiecutter-pylibrary

[tox]
envlist =
    clean,
    check,
    lint,
    py36-notebook{57,65},
    py36-notebook,
    report,

[testenv]
basepython =
    pypy: {env:TOXPYTHON:pypy}
    py36: {env:TOXPYTHON:python3.6}
    {docs,spell}: {env:TOXPYTHON:python3.6}
setenv =
    PYTHONPATH={toxinidir}/tests
    PYTHONUNBUFFERED=yes
passenv = *
usedevelop = false
deps =
    coverage
    jupyterhub: jupyterhub>=2.3.1
    mock
    nose
    notebook57: notebook==5.7
    notebook64: notebook==6.4
    notebookmaster: https://github.com/jupyter/notebook/archive/master.zip
    notebook: notebook
    requests
    selenium
commands =
    {posargs:coverage run --parallel-mode --source=src -m nose -vv -a '!uses_jupyterhub' tests}

[testenv:jupyterhub]
commands =
    {posargs:coverage run --parallel-mode --source=src -m nose -vv -a uses_jupyterhub tests}

[testenv:lint]
skip_install = true
deps =
    flake8
    isort
commands =
    flake8 src tests setup.py
    isort --verbose --check-only --diff --recursive src tests setup.py

[testenv:docs]
deps =
    -r{toxinidir}/docs/requirements.txt
commands =
    sphinx-build {posargs:-E} -b html docs dist/docs
    sphinx-build -b linkcheck docs dist/docs

[testenv:spell]
skip_install = true
setenv =
    SPELLCHECK=1
deps =
    -r{toxinidir}/docs/requirements.txt
    pyenchant
    sphinxcontrib-spelling
commands =
    sphinx-build -b spelling docs dist/docs

[testenv:coveralls]
skip_install = true
deps = coveralls
commands =
    coverage combine --append
    coverage report
    coveralls []

[testenv:codecov]
skip_install = true
deps =
    codecov
commands =
    coverage combine --append
    coverage report
    coverage xml --ignore-errors
    codecov []

[testenv:report]
skip_install = true
deps = coverage
commands =
    coverage combine --append
    coverage report
    coverage html

[testenv:clean]
skip_install = true
deps = coverage
commands = coverage erase

[testenv:bump]
skip_install = true
deps = bumpversion
whitelist_externals = git
commands =
    bumpversion {posargs:patch}
    python -c "import configparser, subprocess, sys; conf = configparser.ConfigParser(); conf.read('.bumpversion.cfg'); ver = conf['bumpversion']['current_version'].strip(); sys.exit(subprocess.call(['git', 'tag', '-a', ver, '-m', ver], stdout=sys.stdout, stderr=sys.stderr))"
    git describe

[testenv:condarecipe]
skip_install = true
deps =
; install of conda itself is handled in travis for CI tests
whitelist_externals =
    conda
    echo
commands =
    echo 'add conda-forge channel needed for jupyter_contrib_core'
    conda config --add channels conda-forge
    conda build conda.recipe/
    conda install --use-local jupyter_nbextensions_configurator

[testenv:pypi_build]
skip_install = true
commands = python setup.py sdist bdist_wheel

[testenv:pypi_upload]
skip_install = true
whitelist_externals = bash
deps = twine
commands = bash -c \"twine upload dist/*\"
