# http://travis-ci.org/#!/jupyter-contrib/jupyter_nbextensions_configurator
language: python
sudo: false
addons:
  firefox: latest
  sauce_connect: true
matrix:
  fast_finish: true
  # Use the built-in venv for linux builds
  # 3.5 as it isn't installed by default. Let tox handle other versions.
  include:
    #   env: TOXENV=docs
    - os: linux
      python: '3.4'
      env: TOXENV=check
    - os: linux
      python: '3.4'
      env: TOXENV=lint
    # conda build/install works
    - os: linux
      python: '3.4'
      env: TOXENV=condarecipe
    # linux, various python and notebook versions
    - os: linux
      python: '3.4'
      env: TOXENV=py27-notebook
    - os: linux
      python: '3.4'
      env: TOXENV=py33-notebook
    - os: linux
      python: '3.4'
      env: TOXENV=py34-notebook40
    - os: linux
      python: '3.4'
      env: TOXENV=py34-notebook41
    - os: linux
      python: '3.4'
      env: TOXENV=py34-notebook42
    - os: linux
      python: '3.4'
      env: TOXENV=py34-notebook43
    - os: linux
      python: '3.4'
      env: TOXENV=py34-notebook44
    - os: linux
      python: '3.5'
      env: TOXENV=py35-notebook50
    - os: linux
      python: '3.5'
      env: TOXENV=py35-notebook
    - os: linux
      python: '3.6'
      env: TOXENV=py36-notebook
    - os: linux
      python: '3.4'
      env: TOXENV=pypy-notebook
    # jupyterhub tests
    - os: linux
      python: '3.4'
      env: TOXENV=jupyterhub
    # OSX tests, python 2 & 3
    # Use generic language on osx, get python via terryfy during before_install
    - os: osx
      language: generic
      env: OSX_PYTHON=2.7 TOXENV=py27-notebook
    - os: osx
      language: generic
      env: OSX_PYTHON=3.5 TOXENV=py35-notebook
    # finally, appveyor downloads from windows platform
    - os: linux
      python: '3.4'
      env: TOXENV=appveyorartifacts
  allow_failures:
    - env: TOXENV=appveyorartifacts
    - env: TOXENV=lint
    - env: TOXENV=pypy-notebook
    - env: TOXENV=py35-notebook50
env:
  global:
    - LD_PRELOAD=/lib/x86_64-linux-gnu/libSegFault.so
    - SEGFAULT_SIGNALS=all
    - SAUCE_USERNAME=nbext_configurator
    # sauce access key
    - secure: "QZb4I+/3mFnc826CdstgYTFrmcvIkXiGmp3tkL9FLLPOEN2MHxPauKZ5J0qnzhIkug9mhCz68GBTlxMU4CpfLXWnKNDV85x1H+TI5K2qLaAPFjL9o7DOvAZW5EmMYac3Vgb022iXy/IbmZOjv9jyNzkqCrLqAaWriyo3c0+J6Onj+Q5JG5HjiJqlLhF9/yzsbqhlFmV42MqpZP3PTXEgrJZlwjNYK9DoBrmNg0Oq2rWoa6qMsaVrC0wiDAclx7PQOQRHr/ocbzAmqqSrBhjZdeRnFNiKiuVLfOr4fq5VLKYkFlSNKp91WzVDWKySXf+gp/zzTM5BCIgawuAD5i3z4cM9JqNGEYyod63QNlR6h04jYuUd6Y6y+5fqkx0uW8CiZtLwU8B4aifcNMMpdSg4eGMVnKsOMB/TcNQ9/4ZN2JijjCPk4x0bSYSJmSNcdPtQS39dXVUuVNRAN9fPrmIRAfmS4/MU2BlHz0OlMfxucby2FyYVI1ng8suc8/xRJMws3qrUlO6HYDGzdOko913/m11HCxinunLVCEfo+kLz2RGWz5aZfVUWuSf/D5jKP5GiIKb1wIV6syfOeNzGzEwu2VPuQ2NVlNshVXAi0+mkEqPHIO9yIDoyF2ktTl1KEKGQjPiz57MBRj2Zr8bNx2GigFpeEHkaxEmqyHgNaF7bJ+E="
before_install:
  - uname -a
  - id -un
  - id -Gn
  # install python on osx
  - 'if [[ ${OSX_PYTHON} ]]; then curl https://raw.githubusercontent.com/MacPython/terryfy/12a4641c4e922eb4a63c82732df8d0c5045430af/travis_tools.sh > travis_tools.sh; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then source travis_tools.sh; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then get_python_environment macpython $OSX_PYTHON venv; fi'
  # install 3.4 as it's the default for tox environments like clean, check
  - 'if [[ ${OSX_PYTHON} ]] && [[ ${OSX_PYTHON} != "3.4" ]]; then install_macpython 3.4; fi'
  # check which python installs are present/active
  - 'if [[ ${OSX_PYTHON} ]]; then echo "\$PYTHON_EXE=$PYTHON_EXE"; fi;'
  - 'if [[ ${OSX_PYTHON} ]]; then if [[ $(which python   ) ]]; then ls -l $(which python   ); else echo "missing"; fi; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then if [[ $(which python2.7) ]]; then ls -l $(which python2.7); else echo "missing"; fi; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then if [[ $(which python3.3) ]]; then ls -l $(which python3.3); else echo "missing"; fi; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then if [[ $(which python3.4) ]]; then ls -l $(which python3.4); else echo "missing"; fi; fi'
  - 'if [[ ${OSX_PYTHON} ]]; then if [[ $(which python3.5) ]]; then ls -l $(which python3.5); else echo "missing"; fi; fi'
  # stuff for conda recipe
  - 'if [[ ${TOXENV} == "condarecipe" ]]; then wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh; fi'
  - 'if [[ ${TOXENV} == "condarecipe" ]]; then bash miniconda.sh -b -p $HOME/miniconda; fi'
  - 'if [[ ${TOXENV} == "condarecipe" ]]; then export PATH="$HOME/miniconda/bin:$PATH"; fi'
  - 'if [[ ${TOXENV} == "condarecipe" ]]; then hash -r; fi'
  - 'if [[ ${TOXENV} == "condarecipe" ]]; then conda config --set always_yes yes --set changeps1 no; fi'
  - 'if [[ ${TOXENV} == "condarecipe" ]]; then conda info -a; fi  # Useful for debugging any issues with conda'
  # conda 4.3.14 & conda-build 2.1.6 seem to fail with signals TypError on travis.
  # conda's auto-update strategy also means that installing or updating anything else will cause
  # conda to attempt to update itself.
  # Thus instead of running
  #    conda update conda
  # we install conda & conda-build together, specifying the versions that we
  # wish to avoid
  - 'if [[ ${TOXENV} == "condarecipe" ]]; then conda install "conda!=4.3.14" "conda-build!=2.1.6"; fi'
  - 'if [[ ${TOXENV} == "condarecipe" ]]; then conda info -a; fi  # Useful for debugging any issues with conda'
  - 'if [[ ${TOXENV} == "condarecipe" ]]; then git fetch --unshallow; fi'
  # also install npm configurable proxy for jupyterhub!
  - 'if [[ ${TOXENV} == "jupyterhub" ]]; then npm install configurable-http-proxy; fi;'
  # decide ehwether js tests will run
  - 'if [[ ${TRAVIS_OS_NAME} == "linux" ]] && [[ ${TOXENV} == py* || ${TOXENV} == jupyterhub ]]; then JS_TESTS="true"; else JS_TESTS="false"; fi;'
  - 'echo "\${JS_TESTS}=$JS_TESTS";'
  # don't need SAUCE if we're not testing js, so disable by clearing env vars
  - 'if [[ ${JS_TESTS} != "true" ]]; then unset SAUCE_USERNAME && unset SAUCE_ACCESS_KEY && echo unset; fi;'
  # for js tests (which we do on linux only), selenium 3 requires geckodriver
  - 'if [[ ${JS_TESTS} == "true" ]]; then GECKODRIVER_VERSION="0.14.0"; fi;'
  - 'if [[ ${JS_TESTS} == "true" ]]; then wget "https://github.com/mozilla/geckodriver/releases/download/v$GECKODRIVER_VERSION/geckodriver-v$GECKODRIVER_VERSION-linux64.tar.gz"; fi;'
  - 'if [[ ${JS_TESTS} == "true" ]]; then mkdir geckodriver; fi;'
  - 'if [[ ${JS_TESTS} == "true" ]]; then tar -xzf "geckodriver-v$GECKODRIVER_VERSION-linux64.tar.gz" -C geckodriver; fi;'
  - 'if [[ ${JS_TESTS} == "true" ]]; then export PATH="$PATH:$PWD/geckodriver"; fi;'
  # remove the downloaded archive, don't care if this fails
  - 'if [[ ${JS_TESTS} == "true" ]]; then rm "geckodriver-v$GECKODRIVER_VERSION-linux64.tar.gz" || true; fi;'
  # from https://docs.travis-ci.com/user/gui-and-headless-browsers/#Using-xvfb-to-Run-Tests-That-Require-a-GUI
  # we need to start xvfb for selenium to work correctly
  - 'if [[ ${JS_TESTS} == "true" ]]; then export DISPLAY=":99.0"; fi;'
  - 'if [[ ${JS_TESTS} == "true" ]]; then sh -e /etc/init.d/xvfb start && sleep 3; fi;'
install:
  - pip install tox
  - virtualenv --version
  - firefox --version
script:
  - tox -v -e ${TOXENV}
after_script:
  # test if TOXENV not in set
  # see http://unix.stackexchange.com/a/111518
  - 'if ! [[ ${TOXENV} =~ ^(appveyorartifacts|check|lint|condarecipe)$ ]]; then tox -e coveralls,codecov; fi'
after_failure:
  - more .tox/log/* | cat
  - more .tox/*/log/* | cat
after_success:
before_cache:
  - rm -rf $HOME/.cache/pip/log
cache:
  directories:
    - $HOME/.cache/pip
notifications:
  email: false
